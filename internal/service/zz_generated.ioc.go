//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package service

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &binanceService_{}
		},
	})
	binanceServiceStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &BinanceService{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*BinanceService)
			var constructFunc BinanceServiceConstructFunc = NewBinanceService
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(binanceServiceStructDescriptor)
}

type BinanceServiceConstructFunc func(impl *BinanceService) (*BinanceService, error)
type binanceService_ struct {
	NewRequest_               func(method string, callback chan any) Request
	InitializeWebsocket_      func()
	SendPingMessage_          func() error
	NewAccountStatusRequest_  func(callback chan any) AccountStatusRequest
	SendAccountStatusMessage_ func(callback chan any) error
	NewTickerPriceRequest_    func(symbols []string, callback chan any) TickerPriceRequest
	SendTickerPriceMessage_   func(symbols []string, callback chan any) error
}

func (b *binanceService_) NewRequest(method string, callback chan any) Request {
	return b.NewRequest_(method, callback)
}

func (b *binanceService_) InitializeWebsocket() {
	b.InitializeWebsocket_()
}

func (b *binanceService_) SendPingMessage() error {
	return b.SendPingMessage_()
}

func (b *binanceService_) NewAccountStatusRequest(callback chan any) AccountStatusRequest {
	return b.NewAccountStatusRequest_(callback)
}

func (b *binanceService_) SendAccountStatusMessage(callback chan any) error {
	return b.SendAccountStatusMessage_(callback)
}

func (b *binanceService_) NewTickerPriceRequest(symbols []string, callback chan any) TickerPriceRequest {
	return b.NewTickerPriceRequest_(symbols, callback)
}

func (b *binanceService_) SendTickerPriceMessage(symbols []string, callback chan any) error {
	return b.SendTickerPriceMessage_(symbols, callback)
}

type BinanceServiceIOCInterface interface {
	NewRequest(method string, callback chan any) Request
	InitializeWebsocket()
	SendPingMessage() error
	NewAccountStatusRequest(callback chan any) AccountStatusRequest
	SendAccountStatusMessage(callback chan any) error
	NewTickerPriceRequest(symbols []string, callback chan any) TickerPriceRequest
	SendTickerPriceMessage(symbols []string, callback chan any) error
}

var _binanceServiceSDID string

func GetBinanceServiceSingleton() (*BinanceService, error) {
	if _binanceServiceSDID == "" {
		_binanceServiceSDID = util.GetSDIDByStructPtr(new(BinanceService))
	}
	i, err := singleton.GetImpl(_binanceServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*BinanceService)
	return impl, nil
}

func GetBinanceServiceIOCInterfaceSingleton() (BinanceServiceIOCInterface, error) {
	if _binanceServiceSDID == "" {
		_binanceServiceSDID = util.GetSDIDByStructPtr(new(BinanceService))
	}
	i, err := singleton.GetImplWithProxy(_binanceServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(BinanceServiceIOCInterface)
	return impl, nil
}

type ThisBinanceService struct {
}

func (t *ThisBinanceService) This() BinanceServiceIOCInterface {
	thisPtr, _ := GetBinanceServiceIOCInterfaceSingleton()
	return thisPtr
}
